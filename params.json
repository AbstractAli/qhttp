{"name":"QHttp (Qt HTTP server+client)","tagline":"a light-weight and asynchronous (non-blocking) HTTP library (both server and client) in Qt 5 and c++11 which is based on Node.js' http parser.","body":"# QHttp\r\n\r\n\r\n### Table of contents\r\n- [About](#about)\r\n- [Features](#features)\r\n- [Sample codes](#sample-codes)\r\n- [Disclaimer](#disclaimer)\r\n- [License](#license)\r\n\r\n## About\r\n[TOC](#table-of-contents)\r\n\r\n`QHttp` is a lightweight, asynchronous and fast HTTP library, containing both server and client side classes for managing connections, parsing and building HTTP requests and responses.\r\n\r\n* this project is inspired by [nikhilm/qhttpserver](https://github.com/nikhilm/qhttpserver) effort to implement a Qt HTTP server. `QHttp` pushes the idea further by implementing client classes and better memory management, a lot more Node.js-like API, ...\r\n\r\n* the fantastic [joyent/http-parser](https://github.com/joyent/http-parser) is the core parser of HTTP requests (server mode) and responses (client mode). \r\n\r\n* By using `std::function` and `c++11 lambda`, the API is intentionally similar to the [Node.js' http module](http://nodejs.org/api/http.html). Asynchronous and non-blocking HTTP programming is quite easy with `QHttp`. have a look at [sample codes](#sample-codes).\r\n\r\n* the objective of `QHttp` is being light weight with a simple API for Qt developers to implement RESTful web services in private (internal) zones. for a fast c++ Json parser / builder, have a look at [azadkuh/gason++](https://github.com/azadkuh/gason--)\r\n\r\n\r\n\r\n## Features\r\n[TOC](#table-of-contents)\r\n\r\n* separate `namespace`s for server and client classes.\r\n\r\n* HTTP server classes: QHttpServer, QHttpConnection, QHttpRequest and QHttpResponse.\r\n\r\n* HTTP client classes: QHttpClient, QHttpRequest and QHttpResponse.\r\n\r\n* **automatic memory management** of objects. Instances of connections, requests and replies will be deleted automatically when socket drops or disconnected.\r\n\r\n* **PIMPL** (Private classes) to achieve better ABI compatibility and cleaner API.\r\n\r\n* Asynchronous and non-blocking. You can handle thousands of concurrent HTTP connections efficiently by a single thread.\r\n\r\n* the only dependencies are: [Qt 5](http://qt-project.org/downloads), [c++11](http://en.wikipedia.org/wiki/C%2B%2B11) and [joyent/http-parser](https://github.com/joyent/http-parser)\r\n\r\n* **high throughput**, I have tried the `QHttp` and [gason++](https://github.com/azadkuh/gason--) to implement a REST/Json web service on an Ubuntu VPS (dual core + 512MB ram) with peak TPS > 5000 (stress test)\r\n\r\n* a simple benchmarking tool, implementing both a RESTful/Json server and client.\r\n\r\n* Tested under **Linux** (Ubuntu 12.04 LTS, 14.04 LTS) and **OS X** (10.9). Easily portable where ever Qt 5 works. I have no **Windows** machine (or time or interest), but this lib should work just fine under Windows, although I've not tried by myself.\r\n\r\n\r\n## Sample codes\r\n[TOC](#table-of-contents)\r\n\r\na HelloWorld **HTTP server** by `QHttp` looks like:\r\n``` cpp\r\nint main(int argc, char** argv) {\r\n\r\n    QCoreApplication app(argc, argv);\r\n\r\n    using namespace qhttp::server;\r\n\r\n    QHttpServer server(&app);\r\n    // listening on 0.0.0.0:8080\r\n    server.listen(QHostAddress::Any, 8080, [](QHttpRequest* req, QHttpResponse* res) {\r\n\r\n        res->setStatusCode(qhttp::ESTATUS_OK);      // status 200\r\n        res->addHeader(\"connection\", \"close\");      // it's the default header, this line can be omitted.\r\n        res->end(\"Hello World!\\n\");                 // response body data\r\n\r\n        // when \"connection: close\", the req and res will be deleted automatically.\r\n    });\r\n\r\n\r\n    if ( !server.isListening() ) {\r\n        fprintf(stderr, \"failed. can not listen at port 8080!\\n\");\r\n        return -1;\r\n    }\r\n\r\n    // application's main event loop\r\n    return app.exec();\r\n}\r\n```\r\n\r\nto request weather information by **HTTP client**:\r\n```cpp\r\nint main(int argc, char** argv) {\r\n    QCoreApplication app(argc, argv);\r\n    using namespace qhttp::client;\r\n\r\n    QHttpClient  client(&app);\r\n    QByteArray   httpBody;\r\n\r\n    QUrl weatherUrl(\"http://api.openweathermap.org/data/2.5/weather?q=tehran,ir&units=metric&mode=xml\");\r\n\r\n    client.request(qhttp::EHTTP_GET, weatherUrl, [&httpBody](QHttpResponse* res) {\r\n        // response handler, called when the HTTP headers of the response are ready\r\n\r\n        // gather HTTP response data\r\n        res->onData([&httpBody](const QByteArray& chunk) {\r\n            httpBody.append(chunk);\r\n        });\r\n\r\n        // called when all data in HTTP response have been read.\r\n        res->onEnd([&httpBody]() {\r\n            // print the XML body of the response\r\n            puts(\"\\n[incoming response:]\");\r\n            puts(httpBody.constData());\r\n            puts(\"\\n\\n\");\r\n\r\n            QCoreApplication::instance()->quit();\r\n        });\r\n\r\n        // just for fun! print headers:\r\n        puts(\"\\n[Headers:]\");\r\n        const qhttp::THeaderHash& hs = res->headers();\r\n        for ( auto cit = hs.constBegin(); cit != hs.constEnd(); cit++) {\r\n            printf(\"%s : %s\\n\", cit.key().constData(), cit.value().constData());\r\n        }\r\n    });\r\n\r\n\r\n    return app.exec();\r\n}\r\n```\r\n\r\n## Disclaimer\r\n[TOC](#table-of-contents)\r\n\r\n* Implementing a lightweight and simple HTTP server/client in Qt with Node.js like API, is the main purpose of `QHttp`.\r\n\r\n* There are lots of features in a full blown HTTP server which are out of scope of this small library, although those can be added on top of `QHttp`.\r\n\r\n* The client classes are by no mean designed as a `QNetworkAccessManager` replacement. `QHttpClient` is simpler and lighter, for serious scenarios just use `QNetworkAccessManager`.\r\n\r\n* I'm a busy person.\r\n\r\n\r\n> If you have any ideas, critiques, suggestions or whatever you want to call it, please open an issue. I'll be happy to hear from you what you'd see in this lib. I think about all suggestions, and I try to add those that make sense.\r\n\r\n\r\n## License\r\n[TOC](#table-of-contents)\r\n\r\nDistributed under the MIT license. Copyright (c) 2014, Amir Zamani.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}