{"name":"QHttp","tagline":"a light-weight and asynchronous HTTP library (both server & client) in Qt5 and C++11 based on Node.js' http parser.","body":"# QHttp\r\n\r\n\r\n### Table of contents\r\n- [About](#about)\r\n- [Features](#features)\r\n- [Sample codes](#sample-codes)\r\n- [Setup](#setup)\r\n- [Source tree](#source-tree)\r\n- [Disclaimer](#disclaimer)\r\n- [License](#license)\r\n\r\n## About\r\n[TOC](#table-of-contents)\r\n\r\n`QHttp` is a lightweight, asynchronous and fast HTTP library, containing both server and client side classes for managing connections, parsing and building HTTP requests and responses.\r\n\r\n* this project is inspired by [nikhilm/qhttpserver](https://github.com/nikhilm/qhttpserver) effort to implement a Qt HTTP server. `QHttp` pushes the idea further by implementing client classes and better memory management, c++11, lambda connections, clean API, ...\r\n\r\n* the fantastic [joyent/http-parser](https://github.com/joyent/http-parser) is the core parser of HTTP requests (server mode) and responses (client mode). I have tried to keep the API similar to the [Node.js](http://nodejs.org/api/http.html)' http module.\r\n\r\n* the objective of `QHttp` is being light weight with a simple API for Qt developers to implement RESTful web services in private (internal) zones. for a fast c++ Json parser / builder, have a look at [azadkuh/gason++](https://github.com/azadkuh/gason--)\r\n\r\n\r\n\r\n## Features\r\n[TOC](#table-of-contents)\r\n\r\n* separate `namespace`s for server and client classes.\r\n\r\n* HTTP server classes: [QHttpServer](./src/qhttpserver.hpp), [QHttpConnection](./src/qhttpserverconnection.hpp), [QHttpRequest](./src/qhttpserverrequest.hpp) and [QHttpResponse](./src/qhttpserverresponse.hpp).\r\n\r\n* HTTP client classes: [QHttpClient](./src/qhttpclient.hpp), [QHttpRequest](./src/qhttpclientrequest.hpp) and [QHttpResponse](./src/qhttpclientresponse.hpp).\r\n\r\n* **automatic memory management** of objects. Instances of connections, requests and replies will be deleted automatically when socket drops or disconnected.\r\n\r\n* **PIMPL** (Private classes) to achieve better ABI compatibility and cleaner API.\r\n\r\n* API is quite similar to **Node.js** http module. have a look at [sample code](#sample-codes).\r\n\r\n\r\n* the only dependencies are: [Qt 5](http://qt-project.org/downloads), [c++11](http://en.wikipedia.org/wiki/C%2B%2B11) and [joyent/http-parser](https://github.com/joyent/http-parser)\r\n\r\n* **high throughput**, I have tried the `QHttp` and [gason++](https://github.com/azadkuh/gason--) to implement a REST/Json web service on an Ubuntu VPS (dual core + 512MB ram) with peak TPS > 5000 (stress test)\r\n\r\n* a simple benchmarking tool, implementing both a RESTful/Json server and client.\r\n\r\n* Tested under **Linux** (Ubuntu 12.04 LTS, 14.04 LTS) and **OS X** (10.9). Easily portable where ever Qt 5 works. I have no **Windows** machine (or time or interest), but this lib should work just fine under Windows, although I've not tried by myself.\r\n\r\n\r\n## Sample codes\r\n[TOC](#table-of-contents)\r\n\r\na HelloWorld **HTTP server** by `QHttp` looks like:\r\n``` cpp\r\nint main(int argc, char** argv) {\r\n\r\n    QCoreApplication app(argc, argv);\r\n\r\n    using namespace qhttp::server;\r\n\r\n    QHttpServer server(&app);\r\n    if ( !server.listen(8080) ) { // listening port\r\n        fprintf(stderr, \"failed. some useful error message!\\n\");\r\n        return -1;\r\n    }\r\n\r\n    QObject::connect(&server,  &QHttpServer::newRequest,\r\n                    [](QHttpRequest* req, QHttpResponse* res) {\r\n        // status 200\r\n        res->setStatusCode(qhttp::ESTATUS_OK);\r\n        \r\n        // it's the default header, this line can be omitted.\r\n        res->addHeader(\"connection\", \"close\"); \r\n        \r\n        // body data of the response\r\n        res->end(\"Hello World!\\n\");\r\n\r\n        // when \"connection: close\" (default mode), the req and res instances\r\n        //  will be deleted automatically as soon as the socket `disconnected()`.\r\n    });\r\n\r\n\r\n    // application's main event loop\r\n    return app.exec();\r\n}\r\n```\r\n\r\nto request weather information by **HTTP client**:\r\n```cpp\r\nint main(int argc, char** argv) {\r\n    QCoreApplication app(argc, argv);\r\n    using namespace qhttp::client;\r\n\r\n    QByteArray  httpBody;\r\n    QHttpClient client(&app);\r\n\r\n    QObject::connect(&client, &QHttpClient::httpConnected, [](QHttpRequest* req){\r\n        // GET request has no body data, just optional headers\r\n        req->addHeader(\"connection\", \"close\");\r\n        req->addHeader(\"cache-control\", \"no-cache\");\r\n        req->end();\r\n    });\r\n\r\n    QObject::connect(&client, &QHttpClient::newResponse, [&](QHttpResponse* res){\r\n\r\n        // collecting body data of the reponse in chunks\r\n        QObject::connect(res, &QHttpResponse::data,\r\n                        [&httpBody](const QByteArray& chunk){\r\n            httpBody.append(chunk);\r\n        });\r\n\r\n        // print the XML body of the response \r\n        QObject::connect(res, &QHttpResponse::end, [&httpBody](){\r\n            puts(\"\\n[incoming response:]\");\r\n            puts(httpBody.constData());\r\n            puts(\"\\n\\n\");\r\n\r\n            QCoreApplication::instance()->quit();\r\n        });\r\n\r\n        // just for fun\r\n        puts(\"\\n[Headers:]\");\r\n        for ( auto cit = res->headers().constBegin(); cit != res->headers().constEnd(); cit++) {\r\n            printf(\"%s : %s\\n\",\r\n                   cit.key().constData(),\r\n                   cit.value().constData()\r\n                   );\r\n        }\r\n    });\r\n\r\n    // calling a web service by Url\r\n    client.request(\r\n    qhttp::EHTTP_GET,\r\n    \"http://api.openweathermap.org/data/2.5/weather?q=tehran,ir&units=metric&mode=xml\"\r\n    );\r\n\r\n    return app.exec();\r\n}\r\n```\r\n\r\n## Setup\r\n[TOC](#table-of-contents)\r\n\r\ninstructions:\r\n```bash\r\n# first clone this repository:\r\n$> git clone --depth=1 https://github.com/azadkuh/qhttp.git\r\n$> cd qhttp\r\n\r\n# prepare dependencies:\r\n$> ./update-dependencies.sh\r\n\r\n# now build the library and the examples\r\n$> qmake qhttp.pro\r\n$> make -j 8\r\n```\r\n\r\n## Source tree\r\n[TOC](#table-of-contents)\r\n\r\n\r\n* **`3rdparty/`**:\r\nwill contain `http-parser` source tree as the only dependency.\r\nthis directory is created by setup. see also: [setup](#setup).\r\n\r\n* **`example/`**:\r\ncontains some sample applications representing the `QHttp` usage:\r\n    * **`helloworld/`**:\r\n    the HelloWorld example of `QHttp`, both server + client are represented.\r\n    see: [README@helloworld](./example/helloworld/README.md)\r\n\r\n    * **`basic-server/`**:\r\n    a basic HTTP server shows how to collect the request body, and respond to the clients.\r\n    see: [README@basic-server](./example/basic-server/README.md)\r\n    \r\n\r\n    * **`benchmark/`**:\r\n    a simple utility to measure the throughput (requests per second) of `QHttp` as a REST/Json server. this app provides both the server and attacking clinets.\r\n    see: [README@benchmark](./example/benchmark/README.md)\r\n    \r\n\r\n* **`src/`**:\r\nholds the source code of `QHttp`. server classes are prefixed by `qhttpserver*` and client classes by `qhttpclient*`.\r\n    * **`private/`**:\r\n    Private classes of the library. see: [d-pointers](https://qt-project.org/wiki/Dpointer).\r\n\r\n* **`tmp/`**:\r\na temporary directory which is created while `make`ing the library and holds all the `.o`, `moc files`, etc.\r\n\r\n* **`xbin/`**:\r\nall the executable binaries will be placed on this folder by `make`.\r\n\r\n\r\n\r\n\r\n## Disclaimer\r\n[TOC](#table-of-contents)\r\n\r\n* Implementing a lightweight and simple HTTP server/client in Qt is the main purpose of `QHttp`.\r\n\r\n* There are lots of features in a full blown HTTP server which are out of scope of this small library, although those can be added on top of `QHttp`.\r\n\r\n* The client classes are by no mean designed as a `QNetworkAccessManager` replacement. `QHttpClient` is simpler and lighter, for serious scenarios just use `QNetworkAccessManager`.\r\n\r\n* I'm a busy person.\r\n\r\n\r\n> If you have any ideas, critiques, suggestions or whatever you want to call it, please open an issue. I'll be happy to hear from you what you'd see in this lib. I think about all suggestions, and I try to add those that make sense.\r\n\r\n\r\n## License\r\n[TOC](#table-of-contents)\r\n\r\nDistributed under the MIT license. Copyright (c) 2014, Amir Zamani.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}